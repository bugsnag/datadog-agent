// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/security/tests/schemas/chmod.schema.json
// pkg/security/tests/schemas/chown.schema.json
// pkg/security/tests/schemas/container.json
// pkg/security/tests/schemas/container_context.json
// pkg/security/tests/schemas/container_event.json
// pkg/security/tests/schemas/datetime.json
// pkg/security/tests/schemas/event.json
// pkg/security/tests/schemas/exec.schema.json
// pkg/security/tests/schemas/file.json
// pkg/security/tests/schemas/host_event.json
// pkg/security/tests/schemas/open.schema.json
// pkg/security/tests/schemas/process.json
// pkg/security/tests/schemas/process_context.json
// pkg/security/tests/schemas/rename.schema.json
// pkg/security/tests/schemas/usr.json
// +build functionaltests

package schemas

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataChmodSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xd1\x6e\x83\x20\x14\x7d\xf7\x2b\x08\xd9\x63\x5b\x3a\x1f\xfd\x89\x7d\xc0\x62\x16\x26\xd7\x41\xa3\xe0\xe0\x6e\x49\xd3\xf8\xef\x0b\x5a\x6d\x8d\x60\x59\xb2\xb7\xf9\x84\xe7\x9c\x7b\x39\x9c\x4b\xb8\x64\x84\x10\x42\x9f\x5c\x25\xa1\xe5\xb4\x20\x54\x22\x76\xae\x60\xec\xe4\x8c\xde\x8f\xf0\xc1\xd8\x0f\x26\x2c\xaf\x91\xe5\xc7\xfc\xb8\x7f\xce\xd9\x55\xbf\xbb\x96\x2b\xe1\x4b\x2b\xd9\x1a\x71\xf0\x85\x13\x81\xe7\x0e\x3c\x63\xde\x4f\x50\xe1\x84\x72\x7d\x7e\xa9\x69\x41\x5e\x87\x5f\xff\x5d\xe6\xd5\xd8\xcf\x82\xe7\x69\xad\x1a\x28\x18\x63\x95\xd1\xc8\x95\x06\xfb\x06\xdf\xa0\x71\xdc\x62\x2e\xe9\x77\xa9\x7d\xa4\x71\x18\x6e\x31\xac\xca\xc9\x5f\xd3\x6c\xfb\x53\x9e\x5d\x62\x03\xde\x59\xd3\x81\x45\x05\x2e\xc8\x0f\x1a\xef\x25\xca\xc6\x43\x0b\x2a\x2d\x7c\x7e\x29\x0b\x62\xe1\x35\xa8\xbc\x25\xd8\x71\x94\x34\x2a\x2e\x83\x4c\xbf\x42\x97\x48\xbf\xf4\x48\x51\x82\x0e\x27\xf4\xd0\xf1\xcd\xe9\xda\xe4\xd2\x5c\x9f\x70\x01\x62\x83\xfa\x4b\x1b\xc9\x67\xff\xb7\xb7\x23\x61\x50\x0f\xb2\xd9\xce\x25\x2d\x93\xb4\x3c\xa8\x00\x87\x4a\x73\x54\xf7\xef\xc3\xfd\x57\x46\xda\x27\x8c\x77\xb5\xc1\x96\x30\xfd\x64\xbf\x3b\xe1\xac\x6e\x8d\x80\xf8\xac\x49\x74\xde\x24\x38\xf3\x30\x1a\xbd\x09\xe3\x83\x9b\xf5\xd9\x4f\x00\x00\x00\xff\xff\xed\x85\xf7\xbe\x82\x06\x00\x00")

func bindataChmodSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataChmodSchemaJson,
		"/chmod.schema.json",
	)
}

func bindataChmodSchemaJson() (*asset, error) {
	bytes, err := bindataChmodSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/chmod.schema.json",
		size:        1666,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataChownSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\x41\x6e\xc3\x20\x10\x45\xf7\x3e\x05\x42\x5d\x26\x21\xf5\xd2\x97\xe8\x01\xaa\xa8\xa2\xf6\xb8\x10\xb9\x40\x61\xda\x2a\x8a\xb8\x7b\x85\x1d\x27\x41\x86\x84\x45\x77\x61\x85\xff\x9f\xc1\x8f\x0f\xe2\x58\x11\x42\x08\x7d\x72\xad\x80\x4f\x4e\x1b\x42\x05\xa2\x71\x0d\x63\x7b\xa7\xd5\x7a\x92\x37\xda\x7e\xb0\xce\xf2\x1e\x59\xbd\xad\xb7\xeb\xe7\x9a\x9d\xea\x57\xa7\x76\xd9\x85\xd6\x56\xe8\x5f\xb5\x09\x8d\xb3\x81\x07\x03\xc1\xd1\xef\x7b\x68\x71\x56\xb9\x3a\xbc\xf4\xb4\x21\xaf\xe3\x67\x18\xc7\xf3\x6c\x5a\xcf\x42\xf0\x69\x2f\x07\x68\x18\x63\xad\x56\xc8\xa5\x02\xfb\x06\x3f\xa0\x70\xfa\xc5\xb9\xc5\xaf\x4a\xd7\x11\xda\x61\x7a\x89\x71\xb6\x9b\xf9\x86\xe1\x36\x9f\x0c\x6e\xac\x8d\xba\xb1\xda\x80\x45\x09\x2e\xe9\x8f\x35\x81\x25\xeb\xe6\x43\x4b\x56\x5a\xf8\xfa\x96\x16\xba\x88\x35\x59\x79\x49\xd0\x70\x14\x34\x5b\xbc\x4b\x3a\x7e\xa1\xc6\x8a\x8f\x19\x29\x0a\x50\xe9\x84\xee\x12\x5f\x48\x97\x90\x31\x9c\x2f\xb8\x00\xb9\x83\xfa\x4f\x8c\xe2\xbd\x3f\xec\xed\x28\x38\xa8\x3b\xd9\xdc\xce\xa5\x2c\x93\xb2\x3c\x68\x07\x0e\xa5\xe2\x28\xaf\xdf\x87\xeb\xb1\x0c\x21\xbb\xdd\xe9\x55\xa9\x7c\xf5\x17\x00\x00\xff\xff\x69\xaa\xbb\xa7\x67\x05\x00\x00")

func bindataChownSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataChownSchemaJson,
		"/chown.schema.json",
	)
}

func bindataChownSchemaJson() (*asset, error) {
	bytes, err := bindataChownSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/chown.schema.json",
		size:        1383,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\xae\xc2\x20\x10\x45\xf7\xfd\x8a\x09\x79\xcb\xd7\x52\x59\xf2\x2b\xc6\x05\xd2\xb1\xa5\x89\x80\xc3\xb8\x30\x86\x7f\x37\x50\xaa\xe9\x8e\x7b\x2f\xe7\x64\xde\x1d\x00\x80\xf8\x4b\x76\xc1\xbb\x11\x1a\xc4\xc2\x1c\x93\x96\x72\x4d\xc1\xf7\x5b\x3d\x04\x9a\xe5\x44\xe6\xc6\x52\x8d\x6a\xec\x4f\x4a\xb6\xff\xff\x0d\x77\x53\x41\x6d\xf0\x6c\x9c\x47\x1a\x0a\xbc\x8f\xfc\x8a\x58\xd6\x70\x5d\xd1\xf2\xde\x46\x0a\x11\x89\x1d\x26\xa1\x61\xbb\xa2\xf6\xd5\xf4\xcb\x07\x43\x62\x72\x7e\x16\xdf\x31\xd7\x57\x6e\x46\xc2\xc7\xd3\x11\x16\xfe\x7c\xf0\xd5\x70\xe9\xf2\x27\x00\x00\xff\xff\x12\xe6\xde\xdb\xec\x00\x00\x00")

func bindataContainerJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainerJson,
		"/container.json",
	)
}

func bindataContainerJson() (*asset, error) {
	bytes, err := bindataContainerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container.json",
		size:        236,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainercontextJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xd1\x0a\x82\x40\x10\x45\xdf\xfd\x8a\x61\xe9\x31\x1d\xf3\x71\x7f\x25\x22\x4c\xc7\x5c\x29\x77\x9b\x9d\xa0\x08\xff\x3d\xc6\x55\x21\xe8\x6d\x38\x9c\xb9\xf7\x7e\x32\x00\x00\xb3\x8b\x4d\x4f\xf7\xda\x58\x30\xbd\x48\x88\x16\x71\x88\x7e\xcc\x13\x2e\x3c\x5f\xb1\xe5\xba\x13\xac\xca\xaa\xcc\x0f\x15\x2e\xfe\x7e\x79\x77\xad\xbe\x36\x7e\x94\xda\x8d\xc4\x67\xbd\xe8\x25\x85\x86\xac\x92\xbc\x03\xa9\xe5\x2f\x03\x35\xb2\xd2\xc0\x3e\x10\x8b\xa3\x68\x2c\xa4\x35\x33\xdf\xb2\x7e\x70\x6a\x63\xea\x34\xa8\x73\x37\xb2\x88\xb8\xa9\xa9\x6e\x93\xa7\xf9\x9a\x96\x22\xa6\xc7\xd3\x31\xe9\xd0\xe3\xbf\x9a\x99\x9d\xb2\xe9\x1b\x00\x00\xff\xff\xb9\xfa\x42\x76\x12\x01\x00\x00")

func bindataContainercontextJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainercontextJson,
		"/container_context.json",
	)
}

func bindataContainercontextJson() (*asset, error) {
	bytes, err := bindataContainercontextJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_context.json",
		size:        274,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainereventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x52\x29\x4e\xce\x48\xcd\x4d\x54\xb2\x52\x50\xca\x28\x29\x29\x28\xb6\xd2\xd7\xcf\x2a\xce\xcf\xd3\x85\x08\xeb\xe5\x17\xa5\xeb\xa7\x14\x25\xa6\x95\xe8\x1b\x19\x18\x19\xe8\x1a\x1a\xe9\x43\xd5\xeb\x40\xb5\x67\xa6\x80\xb4\x26\xe7\xe7\x95\x24\x66\xe6\xa5\x16\xc5\xa7\x96\xa5\xe6\x95\xe8\x81\x8c\x80\x29\x49\xcc\xc9\xf1\x4f\x53\xb2\x52\x88\x06\x73\x41\xa0\x1a\xce\x82\x98\x51\x94\x0a\x92\x57\x4a\xcb\xcc\x49\xb5\xd2\xd7\xd7\xcf\xc8\x2f\x2e\x41\x36\x07\xae\xba\x56\x87\x58\x23\x10\xee\x01\xb1\x52\x2b\x30\x4c\x02\xb3\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\xef\xab\x6c\xf9\x06\x01\x00\x00")

func bindataContainereventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainereventJson,
		"/container_event.json",
	)
}

func bindataContainereventJson() (*asset, error) {
	bytes, err := bindataContainereventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_event.json",
		size:        262,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatetimeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x4d\xca\x83\x30\x10\x86\xf7\x9e\x22\x0c\xdf\xd2\x98\x31\x7c\x9b\xe6\x12\x3d\x80\x58\x08\x35\xfe\x14\x8d\x92\xcc\xa6\x48\xee\x5e\xa2\xd6\x62\x4b\x69\xc8\xe2\xcd\xcc\xf3\x90\x77\x4e\x18\x63\x0c\xfe\xfc\xb5\x35\x83\x06\xc5\xa0\x25\x9a\xbc\x12\xe2\xe6\x47\xcb\xd7\x71\x36\xba\x46\x54\x4e\xd7\x24\x24\x4a\xe4\xb9\x14\x1b\x9f\x6e\x7a\x57\x45\xb5\xd2\x64\xa8\x1b\x4c\x16\xdd\xe7\x4e\xf7\xfd\xb9\x06\xc5\x8a\xe5\x19\xcf\xbc\xa7\x05\xa0\xfb\x64\xa2\xed\xc9\x75\xb6\xd9\xb4\x7d\x3b\x69\x22\xe3\x6c\x04\x2e\x05\xf2\x53\x39\xff\x07\xbe\x06\xf9\x0a\xb0\x4b\x21\xfd\xf6\x8f\x1d\x09\xd4\xdb\xf0\x77\x81\x8f\x12\x88\x98\xf3\xe5\xc2\x01\x0c\xc9\x31\x95\x49\x78\x04\x00\x00\xff\xff\x99\x6a\xef\xa9\x5d\x01\x00\x00")

func bindataDatetimeJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatetimeJson,
		"/datetime.json",
	)
}

func bindataDatetimeJson() (*asset, error) {
	bytes, err := bindataDatetimeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/datetime.json",
		size:        349,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataEventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcb\x6e\xc2\x30\x10\xbc\xfb\x2b\xac\x15\x47\x60\x69\x8e\xf9\x95\xaa\x07\x37\xd9\x04\xa3\xc6\x76\xd7\x0b\x12\xaa\xf8\xf7\xca\x38\x20\xb9\x79\x5c\xca\x75\x66\x67\x76\xc6\xde\x1f\xa5\xb5\xd6\xb0\x89\xcd\x91\x06\x03\xb5\x86\xa3\x48\x88\x35\xe2\x29\x7a\xb7\xcb\xf0\xde\x73\x8f\x2d\x9b\x4e\xb0\x3a\x54\x87\xdd\x5b\x85\xe3\xfc\x76\x94\xdb\x36\x49\xe9\x42\x4e\xf6\x49\xf8\x20\xe4\x1a\x28\x31\xfe\xf3\x44\x8d\x3c\xd0\xc0\x3e\x10\x8b\xa5\x08\xb5\xce\x09\xee\x38\x5d\xa4\x00\x96\x2d\x9e\xec\x82\xd5\x93\x77\x66\xa0\x59\xa6\xf0\x8e\xc2\xd6\xf5\x30\x19\xba\x6d\xa7\x8e\x8d\x11\xea\x3d\x5f\x5f\xeb\xea\xcf\xd2\xf8\x7f\x45\x55\x2b\x2b\x80\xe9\xfb\x6c\x99\xd2\x2f\xbd\x2f\x3c\xd2\x5a\xd5\x95\xc0\x05\xf3\xa1\x66\x02\x40\x6b\x64\x5a\x0c\x36\x4c\x5d\x2a\xd4\xd9\x2f\xaa\x11\x31\x4d\x89\x1d\x28\xdf\x8f\x2a\x7b\x8d\x76\xf3\x3d\xee\x77\xf3\x77\x9f\xca\x79\x6e\xbf\x01\x00\x00\xff\xff\x77\xb8\x98\xe7\xe1\x02\x00\x00")

func bindataEventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataEventJson,
		"/event.json",
	)
}

func bindataEventJson() (*asset, error) {
	bytes, err := bindataEventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/event.json",
		size:        737,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataExecSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8d\x41\xae\x83\x30\x0c\x44\xf7\x9c\xc2\x8a\xfe\x12\x30\x9f\x65\x2e\xd1\x03\x54\x55\x95\x06\xd3\x04\xb5\x09\x4a\xac\xaa\x08\x71\xf7\x2a\x04\x58\x75\x51\xaf\xc6\x33\x7e\xe3\xb9\x00\x00\x10\x7f\x51\x1b\x7a\x2a\x21\x41\x18\xe6\x31\x4a\xc4\x21\x7a\x57\x65\xbb\xf6\xe1\x8e\x5d\x50\x3d\x63\xdb\xb4\x4d\xf5\xdf\xe2\x76\x5f\x6e\xb8\xed\x12\x4a\x6f\xd2\x75\xe2\x76\x9f\xa7\x91\x52\xe0\x6f\x03\x69\xde\x5d\xe5\xa6\x53\x2f\x24\x9c\xd7\x35\xcd\x7c\xa8\x5c\x17\x28\xe5\xa2\xb7\x0f\x92\x88\xa8\xbd\x63\x65\x1d\x85\x2b\xbd\xc8\x71\x7e\x71\x20\x4b\xf9\x6b\x8f\xf1\x91\xbf\x57\xac\xea\x52\x2c\xc5\x27\x00\x00\xff\xff\x37\x85\x79\xd6\x10\x01\x00\x00")

func bindataExecSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataExecSchemaJson,
		"/exec.schema.json",
	)
}

func bindataExecSchemaJson() (*asset, error) {
	bytes, err := bindataExecSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/exec.schema.json",
		size:        272,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFileJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdd\x8e\xb2\x30\x10\xbd\xf7\x29\x08\xf1\x52\xad\x9f\x97\xbc\xca\x97\x8d\xe9\xc2\x50\xc6\x48\xcb\x4e\x87\x0b\xb3\xf1\xdd\x37\x15\xc1\xb0\xd0\xd2\x64\xf1\x76\x7e\xce\xf4\x9c\xce\xcf\xf7\x26\x49\x92\x24\xdd\xda\xbc\x82\x5a\xa6\x59\x92\x56\xcc\x8d\xcd\x84\xb8\x58\xa3\xf7\x9d\xf9\x60\x48\x89\x82\x64\xc9\xe2\x74\x3c\x1d\xf7\xff\x4e\xe2\x19\xbf\x7b\xa6\x63\xe1\x52\x4b\xbc\xc2\xc1\xe5\xf5\x76\xbe\x35\xe0\x1c\xe6\xf3\x02\x39\xf7\xd6\x86\x4c\x03\xc4\x08\x36\xcd\x92\xee\x01\x0f\xbb\x4b\x1f\x59\xfc\x18\x83\xd7\x83\xf5\xf2\x4b\xae\x66\x3d\x23\x6c\xcb\x84\x5a\xa5\x93\xa0\xfb\x6e\x8a\xa8\x65\x3d\x7d\xe5\x9f\x10\x51\x9b\x22\x02\x12\x35\x83\x02\x8a\xc3\xac\xdf\x01\xd9\x6a\x3e\x3f\x7e\x7a\x4d\x58\xf7\xeb\xf6\x66\x19\xea\x75\x55\x6d\x2d\xd0\xba\x88\x8a\x4c\xdb\xac\x0b\x59\x9b\x02\x4b\xcc\x25\xa3\xd1\x67\xc6\x50\x67\x6d\x09\xca\x7e\xc8\x32\x21\x44\x21\x19\x5c\x46\x37\x70\x51\xd5\xf2\x4a\x6a\x05\xef\xaf\x53\x80\x65\xd4\x0f\x52\xcb\x72\xcd\xce\xf5\x10\xb5\x30\xdf\x43\x5c\xb0\xdf\x27\x35\xbd\x0d\x1a\x60\x35\x80\xb4\x81\x11\x58\xb7\x92\x5a\xb7\xd2\xac\xc7\x53\x3f\x25\xf8\x6a\x91\xc0\x3d\xe0\x7f\x58\x8b\x05\x02\xb3\xde\x8f\xb8\xd5\x70\x95\xca\xff\xef\x03\x73\x49\x24\x6f\xbe\x06\x42\x86\xda\x06\x49\x44\xea\xeb\x1b\xeb\x81\x40\x2c\xd1\x91\xe5\x17\xed\xb0\xec\xdd\x35\xf3\xdd\x24\xef\x65\xf1\x9d\x87\xd0\x8e\x0f\x2f\xea\xa8\x4d\xb6\xb0\x80\x46\xde\x97\x4c\x9d\x3c\xf7\xcd\x7d\xf3\x13\x00\x00\xff\xff\x89\x39\x91\x53\x9b\x08\x00\x00")

func bindataFileJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFileJson,
		"/file.json",
	)
}

func bindataFileJson() (*asset, error) {
	bytes, err := bindataFileJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/file.json",
		size:        2203,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataHosteventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\xca\x83\x30\x10\x85\xf7\x9e\x22\x0c\xff\x52\x1d\x7f\x97\xb9\x44\x0f\x50\x8a\x04\x1d\xab\x45\x8d\x64\xa6\xa5\x20\xde\xbd\x44\xad\xb4\xd2\x85\x98\x4d\x26\xf3\xde\xf7\xc2\x1b\x02\xa5\x94\x82\x3f\xce\x2b\x6a\x0d\x68\x05\x95\x48\xcf\x1a\xf1\xc6\xb6\x8b\xe6\x75\x6c\xdd\x15\x0b\x67\x4a\xc1\x34\x49\x93\xe8\x3f\xc5\xc5\x1f\x2e\x78\x5d\x4c\xa8\x65\xc9\xe8\x41\x9d\xc4\x9e\x7e\xab\xa6\x69\x4e\x25\x68\x75\x9e\x9e\xfe\x0c\xeb\x34\xe3\x8e\xbc\x0e\x65\xdd\x90\x46\xc4\x8f\x88\xd5\x38\x86\x7b\x69\x7f\x1f\x86\xef\xec\x0e\xb3\xbd\xb3\x39\x31\x67\xb9\xed\x84\x9e\xfb\x0b\x14\x46\x08\xf4\x66\xfb\xf3\x07\xef\x94\xba\xdd\xd6\x9b\xe2\x83\xef\xe9\x12\x8c\xaf\x00\x00\x00\xff\xff\xd2\xc0\x49\xeb\xdc\x01\x00\x00")

func bindataHosteventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataHosteventJson,
		"/host_event.json",
	)
}

func bindataHosteventJson() (*asset, error) {
	bytes, err := bindataHosteventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/host_event.json",
		size:        476,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataOpenSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x51\xc1\x4e\xc3\x30\x0c\xbd\xf7\x2b\xa2\x88\xe3\x36\x8f\x1e\xf3\x13\x7c\x00\x9a\x50\x68\x9c\x35\x53\x48\x82\x63\x10\xd3\xd4\x7f\x47\x69\xd6\x69\xd0\x0e\x21\x71\x21\x27\xfb\x3d\x3f\xdb\xcf\x39\x35\x42\x08\x21\xef\x72\xd7\xe3\x8b\x96\x4a\xc8\x9e\x39\x65\x05\x70\xc8\x31\xac\x2b\xbc\x89\xb4\x07\x43\xda\x32\xb4\xdb\x76\xbb\xbe\x6f\xe1\x5c\xbf\x3a\xcb\x9d\x29\x52\xfc\xc0\x6e\x53\x74\x13\xce\xc7\x84\x85\x88\xcf\x07\xec\x78\x42\x75\x38\x3e\x58\xa9\xc4\xe3\x98\x96\x77\xba\x44\xb5\x1d\x61\xe1\xa5\x75\x1e\x15\x00\x74\x31\xb0\x76\x01\xe9\x09\xdf\x31\x70\x1d\x71\x91\x0c\xab\xdf\xf6\xe9\x63\xe6\xe5\x16\x63\xb4\x9b\xf6\xf3\xfe\xe7\xfd\x12\xc5\x84\xc4\x0e\xb3\x54\xdf\xb8\x91\x2f\xf3\x16\x99\xdb\x47\x99\x55\x11\xbe\xbe\x39\x42\xf3\x65\x8f\x59\x95\xc1\xcc\x2e\x68\x76\xd7\x6e\xae\xdf\x6e\x86\x0e\xcd\x72\x76\xfb\x8c\xff\xc7\xae\xf5\x7a\x9f\xff\x6c\xb4\x7e\x76\x33\x7c\x06\x00\x00\xff\xff\x18\xc8\xfe\x75\xfc\x02\x00\x00")

func bindataOpenSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataOpenSchemaJson,
		"/open.schema.json",
	)
}

func bindataOpenSchemaJson() (*asset, error) {
	bytes, err := bindataOpenSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/open.schema.json",
		size:        764,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProcessJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x6e\xe3\x2c\x10\xbd\xf7\x53\x58\x56\x2f\xdb\xba\xcd\x65\xde\xe0\xbb\xfa\x1e\x60\x55\x45\xd4\x1e\x12\xba\x06\x5c\x18\xaf\x36\x8a\xf2\xee\x2b\x3b\x89\x93\x18\xc6\xbf\x44\xbb\xbe\xb2\x80\x39\x33\x1c\x86\xc3\xc0\x21\x8a\xe3\x38\x4e\x9e\x6c\xb6\x03\xc9\x92\x75\x9c\xec\x10\x4b\xbb\x4e\xd3\x2f\xab\xd5\xcb\xa9\xf9\x55\x9b\x6d\x9a\x1b\xc6\x31\x5d\xbd\xad\xde\x5e\xde\x57\xe9\x79\xfc\xf3\xd9\x5c\xe4\xb5\x69\x69\x74\x06\xd6\xbe\xd6\xa6\x97\x2e\xdc\x97\x50\xf7\xe9\xcf\x2f\xc8\xf0\xd2\x5a\x1a\x5d\x82\x41\x01\x36\x59\xc7\xa7\x18\x4e\xa3\x1b\xa0\x6b\xc3\x1d\x84\x50\x08\x5b\x30\x49\xdb\x7b\x7c\xbe\x5a\x56\xb3\x2d\xb7\xf3\x7d\x5a\x30\xb4\xa9\x45\x23\xd4\x96\xf0\x69\x74\x55\xce\x33\x85\xdf\x90\x55\xc8\x3e\x0b\xd8\x94\x0c\x77\xf3\x40\x32\x2d\xe5\x62\xf7\x42\xe9\x1c\x66\x52\x77\x03\x23\x75\xa5\x70\x33\x7b\x11\x10\xf7\xae\x25\x2b\x8a\xff\x79\xb2\x8e\x7f\xdc\x35\xd7\xdf\xc1\x69\xe9\x9d\xba\xc7\xe3\x00\x92\xd2\xe8\xc4\xd3\xe7\xca\x05\x6e\x47\x82\xaa\xa4\x77\x12\xf7\x0e\xab\xa2\x70\x03\xbe\x7c\x1f\xde\x9e\xa3\x3b\xc1\xc8\x6f\x75\x4b\x35\xd7\xe6\xe7\x06\x85\xf4\x2c\xfa\x93\x81\x9a\xef\x84\x8b\x02\xd6\x69\x9a\xe6\x0c\xa1\x1e\x79\xd2\x02\x32\x05\xc2\xa1\x65\x06\x72\x50\x28\x58\x61\xe9\x44\xba\x13\xa1\xb6\x97\x10\xa3\xb6\xdf\x27\x2d\x0e\xb4\x93\xa3\x9e\x20\xaf\x88\x3e\xe1\x70\x20\x27\xe4\xa2\x57\xc4\x96\xc5\xe8\x97\xa8\x45\x41\x42\x78\x26\x21\x3c\x95\x10\x9e\x4b\x78\x00\x99\xdc\x86\x67\x93\xdb\xf0\x74\x72\x1b\x9e\x4f\x6e\x1f\x40\x68\xc6\xca\x0d\x70\x0e\x19\x8a\x5f\xae\x26\x39\xd0\xcc\x18\xb6\x27\xd4\x3b\x11\x08\xd2\xaf\x26\xa3\x43\x24\xc2\x6c\x6c\x2b\x25\xbe\x2b\xf8\xef\xec\x04\x4d\x05\xa3\x67\x58\x82\x91\x02\x11\x46\x2c\xc9\xbf\x3e\xc3\xa8\x07\x28\x31\xf0\x5d\x09\xd3\x4c\xd3\x3d\x3f\x1b\x49\x27\x54\x94\xd2\x2d\x4a\x29\xc8\xad\x49\xee\x85\xc1\xdc\x1b\x5c\xba\x11\x67\xf5\xb5\xc0\x0a\x7d\x1c\x7a\xab\x4e\x07\x7b\xca\xce\x53\xcc\x53\x04\x2c\x42\xf4\x97\xa6\x0e\xe4\x24\xd1\x91\x8f\x80\x24\x4a\xdf\x65\xb0\x75\xd9\x64\xf7\x16\xc1\xad\xf1\x1d\xe0\x29\xac\x86\x3f\x70\xc2\x1f\x0d\x52\xe7\x82\x8b\x8c\xa1\xd0\xca\x5f\x5d\xb6\x43\x47\x56\x99\x7d\xde\xb2\x1d\x53\x5b\x08\xec\x67\x81\xae\x35\x7b\x93\xda\x61\xe4\x3e\xa1\x92\xbd\x2f\x63\xfb\xd3\x8e\x48\x9e\xf1\x92\xeb\x2e\xe3\x00\xfb\x23\x24\x31\xd3\x0a\x99\x50\xbe\x3b\x7b\x77\x89\xda\xa1\xdd\x1b\x47\x74\x03\x9a\x68\x05\x9d\x5b\xe6\x61\xa2\x94\x4e\x49\x7f\xe2\xa4\x1c\xbc\x24\xbe\x7b\x7b\xdc\x7b\xe1\xa2\xbc\x13\x63\x0e\xa5\xbf\xc0\x8e\x14\x4a\xc8\x86\xa0\xd5\xa8\x0d\x5d\x4e\x72\x1a\x9c\x43\x2a\x22\x8a\xdb\xe6\xef\xe3\x9c\x8e\x5e\xf8\xe6\x49\xad\xf3\x4e\xd6\x79\xfc\xea\x79\x5c\xea\x3e\x19\xf5\x3d\x04\x0d\xbc\xee\x10\x77\x75\x7f\xc9\x72\x9a\x57\x74\x8c\xfe\x04\x00\x00\xff\xff\x6d\x15\x6a\xe1\xa0\x14\x00\x00")

func bindataProcessJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataProcessJson,
		"/process.json",
	)
}

func bindataProcessJson() (*asset, error) {
	bytes, err := bindataProcessJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/process.json",
		size:        5280,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProcesscontextJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x41\x6e\xc3\x20\x10\x45\xf7\x3e\x05\x42\x5d\x26\x21\xf5\x92\x4b\xf4\x00\x55\x55\x51\x3c\x6e\x88\x1c\xa0\xc3\x54\x6a\x14\xe5\xee\x15\x06\x5b\x8d\x8c\x9d\x34\xf1\xf2\xf3\xff\xd7\x1b\x18\x9f\x2a\xc6\x18\xe3\x4f\x41\xef\xe0\xa0\xb8\x64\x7c\x47\xe4\x83\x14\x62\x1f\x9c\x5d\x27\x79\xe3\xf0\x53\x34\xa8\x5a\x12\xf5\xb6\xde\xae\x9f\x6b\x91\xfd\xab\x1c\x37\x4d\x8c\x7a\x74\x1a\x42\x78\xd7\xce\x12\xfc\xd0\x26\x56\x0c\x16\x3a\x7a\x88\x1e\xf7\xb1\x07\x4d\x83\xea\xd1\x79\x40\x32\x10\xb8\x64\x89\x65\xd0\x63\xd3\x85\xd8\x1f\xa8\xae\x7b\x69\xb9\x64\xaf\x17\x72\xfc\x4e\x13\x25\xa1\x21\x44\x3f\x6f\x4d\x07\x52\x08\x91\x9b\x13\xdb\x24\x72\x5e\xdd\xda\x3b\x43\x3e\xf5\x29\x04\x4b\x8b\x9e\x3b\x38\x17\x78\xc7\x46\x65\x35\x04\x72\xb8\x0c\xc8\xfe\x3e\x8e\x42\x54\x47\x3e\xdf\xd9\x9b\x0d\xc1\xe1\x7a\xe7\x03\x43\xf5\x83\xdd\x35\x72\x5c\x3c\x65\x2c\xe0\xff\xef\x7b\x8c\x5e\xbb\xf1\xe2\xc9\x0c\x14\x47\xf8\xfa\x36\x08\x4d\x71\x63\x47\x57\xde\x91\x9b\xde\xb2\xe8\x79\x9b\x2e\x72\x55\x3e\x4f\x7a\xc6\x2d\xe3\x8d\x3f\x5f\x95\xa2\xe7\xdf\x00\x00\x00\xff\xff\x69\x16\x74\x58\x24\x04\x00\x00")

func bindataProcesscontextJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataProcesscontextJson,
		"/process_context.json",
	)
}

func bindataProcesscontextJson() (*asset, error) {
	bytes, err := bindataProcesscontextJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/process_context.json",
		size:        1060,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataRenameSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xd1\x6e\x83\x20\x14\x7d\xf7\x2b\x08\xd9\x63\x5b\x3a\x1f\xfd\x89\x7d\xc0\x62\x16\xa6\xd7\x49\xa3\xe0\xe0\x6e\x49\xd3\xf0\xef\x0b\x5a\x6d\x89\x60\x59\xb2\xb7\xf9\x84\xe7\x9c\x7b\x39\x9c\x4b\xb8\x64\x84\x10\x42\x9f\x4c\xd5\x42\xcf\x69\x41\x68\x8b\x38\x98\x82\xb1\x93\x51\x72\x3f\xc1\x07\xa5\x3f\x58\xad\x79\x83\x2c\x3f\xe6\xc7\xfd\x73\xce\xae\xfa\xdd\xb5\x5c\xd4\xae\x54\x83\xe4\x3d\x1c\x5c\xe5\xcc\xe0\x79\x00\x47\xa9\xf7\x13\x54\x38\xa3\x5c\x9e\x5f\x1a\x5a\x90\xd7\xf1\xd7\x7d\x97\x65\x35\x35\xd4\xe0\x78\xda\x88\x0e\x0a\xc6\x58\xa5\x24\x72\x21\x41\xbf\xc1\x37\x48\x9c\xb6\x58\x4a\xec\x2e\xb5\x4f\xab\x0c\x86\x5b\x8c\xab\x72\xf6\xd7\x75\xdb\xfe\x84\x63\x7d\x6c\xc4\x07\xad\x06\xd0\x28\xc0\x04\xf9\x51\xe3\xbc\x44\xd9\x78\x68\x41\xa5\x86\xcf\x2f\xa1\xa1\xf6\xbc\x06\x95\xb7\x04\x07\x8e\x2d\x8d\x8a\xcb\x20\x63\x57\xa8\x8f\x58\xdf\x23\xc5\x16\x64\x38\xa1\x87\x8e\x6f\x4e\xd7\x26\x7d\x73\x36\xe1\x02\xc4\x06\xf5\x97\x36\x92\xcf\xfe\x6f\x6f\x47\xc2\xa0\x1e\x64\xb3\x9d\x4b\x5a\x26\x69\x79\xd0\x1a\x0c\x0a\xc9\x51\xdc\xbf\x0f\xf7\x5f\x19\x69\x9f\x30\xde\xd5\x06\x5b\xc2\xf4\x93\xfd\xee\x84\x8b\xba\x57\x35\xc4\x67\x4d\xa2\xf3\x26\xc1\x99\x87\xd1\xe8\x4d\x98\x1e\xdc\xcc\x66\x3f\x01\x00\x00\xff\xff\x82\xb6\xa8\x78\x83\x06\x00\x00")

func bindataRenameSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataRenameSchemaJson,
		"/rename.schema.json",
	)
}

func bindataRenameSchemaJson() (*asset, error) {
	bytes, err := bindataRenameSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/rename.schema.json",
		size:        1667,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataUsrJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\x41\x0e\x83\x20\x10\x45\xf7\x9c\x62\x42\xba\x54\xb1\x2e\xbd\x8d\x55\xaa\x98\x54\xc8\xcc\xb0\x68\x1a\xee\xde\x20\x6a\x62\xa8\xab\xee\xe0\xfd\xff\x1f\x7c\x04\x00\x80\xbc\x51\x3f\xe9\x57\x27\x5b\x90\x13\xb3\xa3\x56\xa9\x99\xec\x52\x26\x5c\x59\x1c\xd5\x80\xdd\x93\x55\x53\x37\x75\x79\x6f\xd4\xd6\x2f\xb6\xb9\x19\xe2\xd4\x13\x56\x71\xb6\x63\x7e\x3b\x1d\xb9\x7d\xcc\xba\xe7\x9d\x3a\xb4\x4e\x23\x1b\x4d\xb2\x85\xf4\xfe\xca\x3d\xe1\x09\x5c\x2b\x8e\xf4\x42\x75\xe4\xeb\xb7\x72\x7e\x32\x13\xa3\x59\x46\x99\x95\x42\x91\xfb\x46\xb4\xde\xfd\xa1\x14\xbf\x6f\xe9\x14\x44\x10\xdf\x00\x00\x00\xff\xff\x86\xf5\x71\x42\x8f\x01\x00\x00")

func bindataUsrJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataUsrJson,
		"/usr.json",
	)
}

func bindataUsrJson() (*asset, error) {
	bytes, err := bindataUsrJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/usr.json",
		size:        399,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/chmod.schema.json":      bindataChmodSchemaJson,
	"/chown.schema.json":      bindataChownSchemaJson,
	"/container.json":         bindataContainerJson,
	"/container_context.json": bindataContainercontextJson,
	"/container_event.json":   bindataContainereventJson,
	"/datetime.json":          bindataDatetimeJson,
	"/event.json":             bindataEventJson,
	"/exec.schema.json":       bindataExecSchemaJson,
	"/file.json":              bindataFileJson,
	"/host_event.json":        bindataHosteventJson,
	"/open.schema.json":       bindataOpenSchemaJson,
	"/process.json":           bindataProcessJson,
	"/process_context.json":   bindataProcesscontextJson,
	"/rename.schema.json":     bindataRenameSchemaJson,
	"/usr.json":               bindataUsrJson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"chmod.schema.json":      {Func: bindataChmodSchemaJson, Children: map[string]*bintree{}},
		"chown.schema.json":      {Func: bindataChownSchemaJson, Children: map[string]*bintree{}},
		"container.json":         {Func: bindataContainerJson, Children: map[string]*bintree{}},
		"container_context.json": {Func: bindataContainercontextJson, Children: map[string]*bintree{}},
		"container_event.json":   {Func: bindataContainereventJson, Children: map[string]*bintree{}},
		"datetime.json":          {Func: bindataDatetimeJson, Children: map[string]*bintree{}},
		"event.json":             {Func: bindataEventJson, Children: map[string]*bintree{}},
		"exec.schema.json":       {Func: bindataExecSchemaJson, Children: map[string]*bintree{}},
		"file.json":              {Func: bindataFileJson, Children: map[string]*bintree{}},
		"host_event.json":        {Func: bindataHosteventJson, Children: map[string]*bintree{}},
		"open.schema.json":       {Func: bindataOpenSchemaJson, Children: map[string]*bintree{}},
		"process.json":           {Func: bindataProcessJson, Children: map[string]*bintree{}},
		"process_context.json":   {Func: bindataProcesscontextJson, Children: map[string]*bintree{}},
		"rename.schema.json":     {Func: bindataRenameSchemaJson, Children: map[string]*bintree{}},
		"usr.json":               {Func: bindataUsrJson, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
